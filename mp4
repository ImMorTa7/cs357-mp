import numpy as np
from matplotlib import colors
import matplotlib.pyplot as plt


def get_change(xvec1,xvec2):
    # define scalar 'change'
    # 'change' is the maximum value of the absolute differece between two vectors
    change = abs(xvec1-xvec2)
    return max(change)

xvec1 = np.array([1.0,0.3,1.0,0.5,0.7,0.2])
xvec2 = np.array([0.5,0.2,0.0,0.7,0.5,0.2])


import numpy as np

def dfunc(xvec,dx):
    # xvec: 1d numpy array
    # dx: float
    # df: 1d numpy array
    # code to obtain df
    df = []
    for i, n in enumerate(xvec):
        x0 = xvec.copy()
        x0[i] += dx
        df_ = (func(x0) - func(xvec))  / dx
        df.append(df_)
    df = np.array(df)
    return df
    
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import convolve2d

identity_filter = np.array([[0.0,0.0,0.0],[0.0,1.0,0.0],[0.0,0.0,0.0]])
image0 = image.copy()
identity_image = convolve2d(image0, identity_filter, mode = 'same')
plt.imshow(identity_image, cmap = 'gray', vmin = 0, vmax = 250)

blur_filter = [1/9 for i in range(9)]
blur_filter = np.array(blur_filter).reshape(3,3)
image1 = image.copy()
blurred_image = convolve2d(image1, blur_filter, mode = 'same')
plt.imshow(blurred_image, cmap = 'gray', vmin = 0, vmax = 250)

sharpen_filter = 2*identity_filter-blur_filter
image2 = image.copy()
sharpened_image = convolve2d(image2, sharpen_filter, mode = 'same')
plt.imshow(sharpened_image, cmap = 'gray', vmin = 0, vmax = 250)


import numpy as np
import math

def create_kernel(rmin):
    # rmin: float
    # H: 2d numpy array
    # code to obtain kernel H
    N = 2*math.floor(rmin) + 1
    center = N//2
    H = np.zeros([N,N])
    for i in range(N):
        for j in range(N):
            delta = math.sqrt((center - i)**2 + (center - j)**2)
            H[i][j] = max(0, rmin-delta)
    return H
import numpy as np
from scipy.signal import convolve2d
from matplotlib import colors
import matplotlib.pyplot as plt
import math

def create_kernel(rmin, nelx, nely):
    # rmin: float
    # H: 2d numpy array
    # code to obtain kernel H
    N = 2*math.floor(rmin) + 1
    center = N//2
    H = np.zeros([N,N])
    for i in range(N):
        for j in range(N):
            delta = math.sqrt((center - i)**2 + (center - j)**2)
            H[i][j] = max(0, rmin-delta)
    H1 = convolve2d(np.ones((nelx, nely)), H, mode='same')
    return H, H1

def filter_design_variable(xvec,H,H1):
    # add code here to filter xvec and return xf
    x = xvec.reshape(H1.shape)
    xf = convolve2d(x, H, mode='same') / H1
    xf = xf.reshape(xvec.shape)
    return xf

H,H1 = create_kernel(2.5, nelx, nely)
xfilt = filter_design_variable(xvec, H, H1)
image = -xfilt.reshape((nelx, nely)).T
image_plot = plt.imshow(image, cmap='gray', interpolation='none', norm=colors.Normalize(vmin=-1, vmax=0))


import numpy as np
from matplotlib import colors
import matplotlib.pyplot as plt

i = 0
while True:
    f = func(xvec)
    df = dfunc(xvec)
    xnew = optimizer(xvec, f, df)
    xnew = filter_design_variable(xnew)
    change = get_change(xnew, xvec)
    xvec = xnew
    i += 1
    if (change <= tol or i > maxiter) : break
image = -xnew.reshape(nelx, nely).T
image_plot = plt.imshow(image, cmap='gray',interpolation='none',norm=colors.Normalize(vmin=-1,vmax=0))

import numpy as np
from matplotlib import colors
import matplotlib.pyplot as plt

xnew1 = topopt(nelx=60,nely=30,volfrac=0.5,maxiter=60,tol=1e-3,rmin=1.5,ft=2)
xnew2 = topopt(nelx=60,nely=30,volfrac=0.5,maxiter=60,tol=1e-3,rmin=1.5,ft=1)
xnew3 = topopt(nelx=60,nely=30,volfrac=0.5,maxiter=60,tol=1e-3,rmin=2.5,ft=1)
xnew4 = topopt(nelx=60,nely=30,volfrac=0.5,maxiter=60,tol=1e-3,rmin=4.0,ft=1)

image1 = -xnew1.reshape((60, 30)).T
image2 = -xnew2.reshape((60, 30)).T
image3 = -xnew3.reshape((60, 30)).T
image4 = -xnew4.reshape((60, 30)).T

image_plot_1 = plt.imshow(image1, cmap='gray', interpolation='none', norm=colors.Normalize(vmin=-1, vmax=0))
image_plot_2 = plt.imshow(image2, cmap='gray', interpolation='none', norm=colors.Normalize(vmin=-1, vmax=0))
image_plot_3 = plt.imshow(image3, cmap='gray', interpolation='none', norm=colors.Normalize(vmin=-1, vmax=0))
image_plot_4 = plt.imshow(image4, cmap='gray', interpolation='none', norm=colors.Normalize(vmin=-1, vmax=0))
