import numpy as np

# Card conversion of our start hand
def cardNameToInt(first):
  # card: string following the "Rank Suit format"
  # write code to convert hand to an integer 0-51 as described above
    
    #first = starting_hand[0]
    #second = starting_hand[1]
    count = 0
    if first.__contains__('2'):
        count = 2-2
    elif first.__contains__('3'):
        count = 3-2   
    elif first.__contains__('4'):
        count = 4-2
    elif first.__contains__('5'):
        count = 5-2
    elif first.__contains__('6'):
        count = 6-2
    elif first.__contains__('7'):
        count = 7-2
    elif first.__contains__('8'):
        count = 8-2
    elif first.__contains__('9'):
        count = 9-2
    elif first.__contains__('T'):
        count = 10-2
    elif first.__contains__('J'):
        count = 11-2
    elif first.__contains__('Q'):
        count = 12-2
    elif first.__contains__('K'):
        count = 13-2
    count = count*4
    
   
   
   
# Dealing hands at random
def generatePlayersCards(n_players,available_deck):
    # do things here

    players_cards = np.empty(shape=(n_players,2),dtype='int')
    for i in range(0,n_players):
        random1 = np.random.randint(0,len(available_deck))
        players_cards[i][0] = available_deck[random1]
        updated_card_deck = np.delete(available_deck, random1)
        available_deck = updated_card_deck
        random2 = np.random.randint(0,len(available_deck))
        players_cards[i][1] = available_deck[random2]
        updated_card_deck = np.delete(available_deck, random2)
        available_deck = updated_card_deck
    
    return(players_cards,updated_card_deck)
    
def generateDealerCards(available_deck):
    # do things here
    dealer_cards = np.empty(shape=5,dtype='int')
    for i in range(0,5):
        random3 = np.random.randint(0,len(available_deck))
        dealer_cards[i] = available_deck[random3]
        updated_card_deck = np.delete(available_deck, random3)
        available_deck = updated_card_deck
    return(dealer_cards,updated_card_deck)
    if first.__contains__('c'):
        value = 0 + count
    elif first.__contains__('d'):
      value = 1+ count
    elif first.__contains__('h'):
      value = 2+ count
    elif first.__contains__('s'):
      value = 3+ count

    #if second.__contains__('c'):
    #    starting_cards[1] = 0
    #elif second.__contains__('d'):
    #  starting_cards[1] = 1
    #elif second.__contains__('h'):
    #  starting_cards[1] = 2
    #elif second.__contains__('s'):
    #  starting_cards[1] = 3
    return value
    
start_cards_flt = np.empty(2)
start_cards = np.empty(2)
start_cards_flt[0] = cardNameToInt(starting_hand[0])
start_cards_flt[1] = cardNameToInt(starting_hand[1])
start_cards = start_cards_flt.astype(int)




#Determining if you have a winning hand
start_cards = np.zeros(2,int)
start_cards[0] = cardNameToInt(starting_hand[0])
start_cards[1] = cardNameToInt(starting_hand[1])
def whoWin(start_cards, players_cards, dealer_cards):
    win = 0
    lose = 0
    tie = 0
    game_result = np.zeros(3, int)
    for i in range(len(players_cards)):
        if compareTwoPlayers(start_cards, players_cards[i], dealer_cards) == 0:
            win += 1
        if compareTwoPlayers(start_cards, players_cards[i], dealer_cards) == 1:
            lose += 1
        if compareTwoPlayers(start_cards, players_cards[i], dealer_cards) == 2:
            tie += 1
    if win == len(players_cards): 
        game_result[0] = 1
        return game_result
    if lose != 0: 
        game_result[1] = 1
        return game_result
        
    game_result[2] = 1
    return game_result
print(start_cards, players_cards[0], dealer_cards)   
game_result = whoWin(start_cards, players_cards, dealer_cards)






#Odds of winning with Monte Carlo

# generate the initial complete deck of cards in ascending order
initialCardDeck = np.arange(0, 52)

# remove the starting_hand before you deal cards to other players and the community cards
start_cards = []
for card in starting_hand:
    start_cards.append(cardNameToInt(card))
start_cards = np.array(start_cards)
available_deck = np.delete(initialCardDeck, start_cards)

# run N games
game_result = np.zeros(3) # [win,lose,tie]
for _ in range(N):  
    players_cards, updated_card_deck = generatePlayersCards(n_players, available_deck)
    dealer_cards,  updated_card_deck = generateDealerCards(updated_card_deck)
    game_result += whoWin(start_cards, players_cards, dealer_cards)

# calculate results
win_probability, lose_probability, tie_probability = game_result/N







#Variability of Monte Carlo

def monteCarloSimulation(M, N, n_players, starting_hand):
    # do stuff here

    win_prob = []
    for m in range(M): # run M experiments
        game_result = np.zeros(3) # [win,lose,tie]
        # just copy from the code from previous page to setup start_cards, available_deck
        
        # generate the initial complete deck of cards in ascending order
        initialCardDeck = np.arange(0, 52)

        # remove the starting_hand before you deal cards to other players and the community cards
        start_cards = []
        for card in starting_hand:
            start_cards.append(cardNameToInt(card))
        start_cards = np.array(start_cards)
        available_deck = np.delete(initialCardDeck, start_cards)
            
        for n in range(N): # run N games
            players_cards, updated_card_deck = generatePlayersCards(n_players, available_deck)
            dealer_cards,  updated_card_deck = generateDealerCards(updated_card_deck)
            game_result += whoWin(start_cards, players_cards, dealer_cards)

        # calculate results
        win_probability, lose_probability, tie_probability = game_result/N
        win_prob.append(win_probability)
        
    win_prob = np.array(win_prob)
    return win_prob
    
    
    
    
    
    
#Ploting to show

import numpy as np
import matplotlib.pyplot as plt

n_players = 1

win_prob_20 = monteCarloSimulation(100, 20, n_players, starting_hand)
win_prob_50 = monteCarloSimulation(100, 50, n_players, starting_hand)

mean_20 = np.mean(win_prob_20)
mean_50 = np.mean(win_prob_50)

std_20 = np.std(win_prob_20)
std_50 = np.std(win_prob_50)

# Plot a histogram of results
plt.hist(win_prob_20,alpha=0.5, label='20 games')
plt.hist(win_prob_50,alpha=0.5, label='50 games')
plt.title('Starting hand ' + str(starting_hand))
plt.legend(loc='upper left')
plt.xlabel('Probability of winning')
plt.ylabel('# of occurances')
plt.show()
